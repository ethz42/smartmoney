import { ContentType, DuneError, payloadJSON, payloadSearchParams, } from "../types";
import { version } from "../../package.json";
import log from "loglevel";
import { logPrefix } from "../utils";
const BASE_URL = "https://api.dune.com/api";
var RequestMethod;
(function (RequestMethod) {
    RequestMethod["GET"] = "GET";
    RequestMethod["POST"] = "POST";
    RequestMethod["PATCH"] = "PATCH";
    RequestMethod["DELETE"] = "DELETE";
})(RequestMethod || (RequestMethod = {}));
/**
 * This class implements all the routes defined in the Dune API Docs:
 * https://docs.dune.com/api-reference/overview/introduction
 */
export class Router {
    apiKey;
    apiVersion;
    constructor(apiKey, apiVersion = "v1") {
        this.apiKey = apiKey;
        this.apiVersion = apiVersion;
    }
    /**
     * Allows a post to any route supported by DuneAPI.
     * Meant to be low level call only used by available functions,
     * but accessible if new routes become available before the SDK catches up.
     * @param route request path of the http post
     * @param params payload sent with request (should be aligned with what the interface supports)
     * @returns a flexible data type representing whatever is expected to be returned from the request.
     */
    async post(route, params, content_type = ContentType.Json) {
        return this._request(RequestMethod.POST, this.url(route), params, false, content_type);
    }
    async _handleResponse(responsePromise) {
        try {
            const response = await responsePromise;
            if (!response.ok) {
                const errorText = await response.text();
                throw new DuneError(`HTTP - Status: ${response.status}, Message: ${errorText}`);
            }
            return (await response.json());
        }
        catch (error) {
            log.error(logPrefix, error);
            throw new DuneError(`Response ${error}`);
        }
    }
    async _request(method, url, payload, raw = false, content_type = ContentType.Json) {
        let body;
        if (Buffer.isBuffer(payload)) {
            body = payload;
        }
        else {
            body = payloadJSON(payload);
        }
        log.debug(logPrefix, `${method} received input url=${url}, payload=${body}`);
        const requestData = {
            method,
            headers: {
                "x-dune-api-key": this.apiKey,
                "User-Agent": `client-sdk@${version} (https://www.npmjs.com/package/@duneanalytics/client-sdk)`,
                "Content-Type": content_type,
            },
            // conditionally add the body property
            ...(method !== RequestMethod.GET && {
                body,
            }),
        };
        let pathParams = "";
        /// Build Url Search Parameters on GET
        if (method === "GET" && payload) {
            const searchParams = new URLSearchParams(payloadSearchParams(payload)).toString();
            pathParams = searchParams ? `?${searchParams}` : "";
        }
        log.debug("Final request URL", url + pathParams);
        const response = fetch(url + pathParams, requestData);
        if (raw) {
            return response;
        }
        return this._handleResponse(response);
    }
    async _get(route, params, raw = false) {
        return this._request(RequestMethod.GET, this.url(route), params, raw);
    }
    async _delete(route) {
        return this._request(RequestMethod.DELETE, this.url(route));
    }
    async _getByUrl(url, params, raw = false) {
        return this._request(RequestMethod.GET, url, params, raw);
    }
    async _patch(route, params) {
        return this._request(RequestMethod.PATCH, this.url(route), params);
    }
    url(route) {
        return `${BASE_URL}/${this.apiVersion}/${route}`;
    }
}
